/* * Copyright (C) 2008 ZXing authors * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package com.google.zxing.client.android;import com.google.zxing.BarcodeFormat;import com.google.zxing.BinaryBitmap;import com.google.zxing.DecodeHintType;import com.google.zxing.MultiFormatReader;import com.google.zxing.NotFoundException;import com.google.zxing.Result;import com.google.zxing.ResultMetadataType;import com.google.zxing.ResultPoint;import com.google.zxing.client.android.camera.CameraManager;import com.google.zxing.client.android.clipboard.ClipboardInterface;import com.google.zxing.client.android.history.HistoryActivity;import com.google.zxing.client.android.history.HistoryItem;import com.google.zxing.client.android.history.HistoryManager;import com.google.zxing.client.android.result.ResultButtonListener;import com.google.zxing.client.android.result.ResultHandler;import com.google.zxing.client.android.result.ResultHandlerFactory;import com.google.zxing.client.android.result.supplement.SupplementalInfoRetriever;import com.google.zxing.client.android.share.ShareActivity;import com.google.zxing.common.HybridBinarizer;import com.shu.messystem.ManageRetrofit;import com.shu.messystem.ConnectServer;import com.shu.messystem.R;import com.shu.messystem.component.ChoosePicture;import com.shu.messystem.component.CustomProgressDialog;import com.shu.messystem.component.ZoomImage;import com.shu.messystem.result_bean.GetLineBean;import android.annotation.SuppressLint;import android.app.Activity;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.ActivityInfo;import android.content.pm.PackageManager;import android.content.res.Configuration;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.net.Uri;import android.os.AsyncTask;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.preference.PreferenceManager;import android.provider.MediaStore;import android.support.annotation.NonNull;import android.support.v7.app.AlertDialog;import android.util.Log;import android.util.TypedValue;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.Surface;import android.view.SurfaceHolder;import android.view.SurfaceView;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.view.WindowManager;import android.widget.ArrayAdapter;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.TextView;import android.widget.Toast;import java.io.IOException;import java.sql.Connection;import java.sql.ResultSet;import java.sql.SQLException;import java.text.DateFormat;import java.util.ArrayList;import java.util.Collection;import java.util.EnumSet;import java.util.List;import java.util.Map;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;/** * This activity opens the camera and does the actual scanning on a background * thread. It draws a viewfinder to help the user place the barcode correctly, * shows feedback as the image processing is happening, and then overlays the * results when a scan is successful. * * @author dswitkin@google.com (Daniel Switkin) * @author Sean Owen */public final class CaptureActivity extends Activity implements SurfaceHolder.Callback {    private static final String TAG = CaptureActivity.class.getSimpleName();    private static final long DEFAULT_INTENT_RESULT_DURATION_MS = 1500L;    private static final long BULK_MODE_SCAN_DELAY_MS = 100L;    private static final String[] ZXING_URLS = {"http://zxing.appspot.com/scan", "zxing://scan/"};    private static final int HISTORY_REQUEST_CODE = 0x0000bacc;    private static final Collection<ResultMetadataType> DISPLAYABLE_METADATA_TYPES = EnumSet.of(            ResultMetadataType.ISSUE_NUMBER, ResultMetadataType.SUGGESTED_PRICE,            ResultMetadataType.ERROR_CORRECTION_LEVEL, ResultMetadataType.POSSIBLE_COUNTRY);    private CameraManager cameraManager;    private CaptureActivityHandler handler;    private Result savedResultToShow;    private ViewfinderView viewfinderView;    private TextView statusView;    private View resultView;    private Result lastResult;    private boolean hasSurface;    private boolean copyToClipboard;    private IntentSource source;    private String sourceUrl;    private ScanFromWebPageManager scanFromWebPageManager;    private Collection<BarcodeFormat> decodeFormats;    private Map<DecodeHintType, ?> decodeHints;    private String characterSet;    private HistoryManager historyManager;    private InactivityTimer inactivityTimer;    private BeepManager beepManager;    private AmbientLightManager ambientLightManager;    private TextView contentsTextView;//显示条码号    private TextView loading;//显示查询结果提示    private ArrayList<String> scanInfo = new ArrayList<String>();//保存查询结果    private ArrayAdapter myArrayAdapter;//显示查询结果的listview适配器    //返回码，相机    private static final int RESULT_CAMERA = 200;    //返回码，相册    private static final int RESULT_ALBUM = 100;    //返回码，剪辑后的照片    private static final int CROP_PICTURE = 2;    //选择图片的类    private ChoosePicture choosePicture;    private MultiFormatReader multiFormatReader;    private boolean isAlbumReturn = false;//    private boolean isInputReturn = false;    private Handler handlerDispResult = new Handler();    private String imagePath;//从相册选择图片的路径    private CustomProgressDialog customProgressDialog;    ViewfinderView getViewfinderView() {        return viewfinderView;    }    public Handler getHandler() {        return handler;    }    CameraManager getCameraManager() {        return cameraManager;    }    @Override    public void onCreate(Bundle icicle) {        super.onCreate(icicle);        Window window = getWindow();        window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);        setContentView(R.layout.capture);        initShowResultView();        hasSurface = false;        inactivityTimer = new InactivityTimer(this);        beepManager = new BeepManager(this);        ambientLightManager = new AmbientLightManager(this);        PreferenceManager.setDefaultValues(this, R.xml.preferences, false);        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);        } else {            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);        }        choosePicture = new ChoosePicture(this);        multiFormatReader = new MultiFormatReader();    }    protected void onResume() {        super.onResume();        // historyManager must be initialized here to update the history preference        historyManager = new HistoryManager(this);        historyManager.trimHistory();        // CameraManager must be initialized here, not in onCreate(). This is necessary        // because we don't        // want to open the camera driver and measure the screen size if we're going to        // show the help on        // first launch. That led to bugs where the scanning rectangle was the wrong        // size and partially        // off screen.        cameraManager = new CameraManager(getApplication());        viewfinderView = (ViewfinderView) findViewById(R.id.viewfinder_view);        viewfinderView.setCameraManager(cameraManager);        resultView = findViewById(R.id.result_view);        statusView = (TextView) findViewById(R.id.status_view);        handler = null;        lastResult = null;        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);		/*         * if (prefs.getBoolean(PreferencesActivity.KEY_DISABLE_AUTO_ORIENTATION, true))		 * { setRequestedOrientation(getCurrentOrientation()); } else {		 * setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE); }		 */        //当从相册界面返回时，不执行        if (!isAlbumReturn) {            resetStatusView();        } else {//当从相册界面返回时，对选择的图片解码            prasePhoto(imagePath);            //decodeAlbumPhoto(imagePath);//解码从相册选取图片的二维码            //imagePath = "";        }        beepManager.updatePrefs();        ambientLightManager.start(cameraManager);        inactivityTimer.onResume();        Intent intent = getIntent();        copyToClipboard = prefs.getBoolean(PreferencesActivity.KEY_COPY_TO_CLIPBOARD, true)                && (intent == null || intent.getBooleanExtra(Intents.Scan.SAVE_HISTORY, true));        source = IntentSource.NONE;        sourceUrl = null;        scanFromWebPageManager = null;        decodeFormats = null;        characterSet = null;        if (intent != null) {            String action = intent.getAction();            String dataString = intent.getDataString();            if (Intents.Scan.ACTION.equals(action)) {                // Scan the formats the intent requested, and return the result to the calling                // activity.                source = IntentSource.NATIVE_APP_INTENT;                decodeFormats = DecodeFormatManager.parseDecodeFormats(intent);                decodeHints = DecodeHintManager.parseDecodeHints(intent);                if (intent.hasExtra(Intents.Scan.WIDTH) && intent.hasExtra(Intents.Scan.HEIGHT)) {                    int width = intent.getIntExtra(Intents.Scan.WIDTH, 0);                    int height = intent.getIntExtra(Intents.Scan.HEIGHT, 0);                    if (width > 0 && height > 0) {                        cameraManager.setManualFramingRect(width, height);                    }                }                if (intent.hasExtra(Intents.Scan.CAMERA_ID)) {                    int cameraId = intent.getIntExtra(Intents.Scan.CAMERA_ID, -1);                    if (cameraId >= 0) {                        cameraManager.setManualCameraId(cameraId);                    }                }                String customPromptMessage = intent.getStringExtra(Intents.Scan.PROMPT_MESSAGE);                if (customPromptMessage != null) {                    statusView.setText(customPromptMessage);                }            } else if (dataString != null && dataString.contains("http://www.google")                    && dataString.contains("/m/products/scan")) {                // Scan only products and send the result to mobile Product Search.                source = IntentSource.PRODUCT_SEARCH_LINK;                sourceUrl = dataString;                decodeFormats = DecodeFormatManager.PRODUCT_FORMATS;            } else if (isZXingURL(dataString)) {                // Scan formats requested in query string (all formats if none specified).                // If a return URL is specified, send the results there. Otherwise, handle it                // ourselves.                source = IntentSource.ZXING_LINK;                sourceUrl = dataString;                Uri inputUri = Uri.parse(dataString);                scanFromWebPageManager = new ScanFromWebPageManager(inputUri);                decodeFormats = DecodeFormatManager.parseDecodeFormats(inputUri);                // Allow a sub-set of the hints to be specified by the caller.                decodeHints = DecodeHintManager.parseDecodeHints(inputUri);            }            characterSet = intent.getStringExtra(Intents.Scan.CHARACTER_SET);        }        SurfaceView surfaceView = (SurfaceView) findViewById(R.id.preview_view);        SurfaceHolder surfaceHolder = surfaceView.getHolder();        if (hasSurface) {            // The activity was paused but not stopped, so the surface still exists.            // Therefore            // surfaceCreated() won't be called, so init the camera here.            initCamera(surfaceHolder);        } else {            // Install the callback and wait for surfaceCreated() to init the camera.            surfaceHolder.addCallback(this);        }    }    private int getCurrentOrientation() {        int rotation = getWindowManager().getDefaultDisplay().getRotation();        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {            switch (rotation) {                case Surface.ROTATION_0:                case Surface.ROTATION_90:                    return ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;                default:                    return ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;            }        } else {            switch (rotation) {                case Surface.ROTATION_0:                case Surface.ROTATION_270:                    return ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;                default:                    return ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;            }        }    }    private static boolean isZXingURL(String dataString) {        if (dataString == null) {            return false;        }        for (String url : ZXING_URLS) {            if (dataString.startsWith(url)) {                return true;            }        }        return false;    }    protected void onPause() {        if (handler != null) {            handler.quitSynchronously();            handler = null;        }        inactivityTimer.onPause();        ambientLightManager.stop();        beepManager.close();        cameraManager.closeDriver();        // historyManager = null; // Keep for onActivityResult        if (!hasSurface) {            SurfaceView surfaceView = (SurfaceView) findViewById(R.id.preview_view);            SurfaceHolder surfaceHolder = surfaceView.getHolder();            surfaceHolder.removeCallback(this);        }        super.onPause();    }    @Override    protected void onDestroy() {        inactivityTimer.shutdown();        super.onDestroy();    }    @Override    public boolean onKeyDown(int keyCode, KeyEvent event) {        switch (keyCode) {            case KeyEvent.KEYCODE_BACK:                if (source == IntentSource.NATIVE_APP_INTENT) { //没有显示扫描结果时点击返回键则关闭                    setResult(RESULT_CANCELED);                    finish();                    return true;                }                //有扫描结果时，返回则隐藏resultView                if ((source == IntentSource.NONE || source == IntentSource.ZXING_LINK) && lastResult != null) {                    restartPreviewAfterDelay(0L);                    return true;                }                if (isAlbumReturn) {//当从相册选择查询后，第一次返回到扫描模式                    handler.sendEmptyMessageDelayed(R.id.restart_preview, 0L);                    resetStatusView();                    isAlbumReturn = !isAlbumReturn;                    return true;                }                if (isInputReturn) {//当输入条码查询后，第一次返回到扫描模式                    handler.sendEmptyMessageDelayed(R.id.restart_preview, 0L);                    resetStatusView();                    isInputReturn = !isInputReturn;                    return true;                }                break;            case KeyEvent.KEYCODE_FOCUS:            case KeyEvent.KEYCODE_CAMERA:                // Handle these events so they don't launch the Camera app                return true;            // Use volume up/down to turn on light            case KeyEvent.KEYCODE_VOLUME_DOWN:                cameraManager.setTorch(false);                return true;            case KeyEvent.KEYCODE_VOLUME_UP:                cameraManager.setTorch(true);                return true;        }        return super.onKeyDown(keyCode, event);    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        MenuInflater menuInflater = getMenuInflater();        menuInflater.inflate(R.menu.capture, menu);        return super.onCreateOptionsMenu(menu);    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        Intent intent = new Intent(Intent.ACTION_VIEW);        intent.addFlags(Intents.FLAG_NEW_DOC);        switch (item.getItemId()) {            case R.id.menu_share:                intent.setClassName(this, ShareActivity.class.getName());                startActivity(intent);                break;            case R.id.menu_history:                intent.setClassName(this, HistoryActivity.class.getName());                startActivityForResult(intent, HISTORY_REQUEST_CODE);                break;            //手动输入条码            case R.id.menu_input:                createInputCodeDialog();                break;            //打开相册            case R.id.menu_album:                choosePicture.choosePicture();                break;            case R.id.menu_settings:                intent.setClassName(this, PreferencesActivity.class.getName());                startActivity(intent);                break;            case R.id.menu_help:                intent.setClassName(this, HelpActivity.class.getName());                startActivity(intent);                break;            default:                return super.onOptionsItemSelected(item);        }        return true;    }    private void createInputCodeDialog() {        View view = LayoutInflater.from(this).inflate(R.layout.inputcode_dialog_layout, null);        EditText codeView = view.findViewById(R.id.input_code);        android.app.AlertDialog dialog = new android.app.AlertDialog.Builder(this)                .setView(view)                .setTitle("输入条码")                .setNegativeButton("确定", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        if (codeView.getText().length() != 0) {                            //清除上次的数据                            scanInfo.clear();                            myArrayAdapter.notifyDataSetChanged();                            queryInputCode(String.valueOf(codeView.getText()));                            isInputReturn = true;                        }                    }                })                .create();        dialog.show();    }    private void queryInputCode(String inputCode) {   /*     maybeSetClipboard(resultHandler);        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);        if (resultHandler.getDefaultButtonID() != null                && prefs.getBoolean(PreferencesActivity.KEY_AUTO_OPEN_WEB, false)) {            resultHandler.handleButtonPress(resultHandler.getDefaultButtonID());            return;        }*/        statusView.setVisibility(View.GONE);        viewfinderView.setVisibility(View.GONE);        //显示时清空内容        resultView.setVisibility(View.VISIBLE);        ImageView barcodeImageView = (ImageView) findViewById(R.id.barcode_image_view); // 图片        // LinearLayout result_view=(LinearLayout) findViewById(R.id.result_view);        /* 设置内容 与标题栏间距 */        LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) barcodeImageView.getLayoutParams();        lp.topMargin = this.getActionBar().getHeight();        barcodeImageView.setLayoutParams(lp);        /*************/        barcodeImageView.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.launcher_icon));        TextView formatTextView = (TextView) findViewById(R.id.format_text_view);        formatTextView.setText("无"); // 二维码格式        TextView typeTextView = (TextView) findViewById(R.id.type_text_view);// 二维码类型        typeTextView.setText("无");        DateFormat formatter = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT);        TextView timeTextView = (TextView) findViewById(R.id.time_text_view);// 扫描时间        timeTextView.setText("无");        TextView metaTextView = (TextView) findViewById(R.id.meta_text_view);        View metaTextViewLabel = findViewById(R.id.meta_text_view_label);// 元数据        metaTextView.setVisibility(View.GONE);        metaTextViewLabel.setVisibility(View.GONE);        Map<ResultMetadataType, Object> metadata = null;        if (metadata != null) {            StringBuilder metadataText = new StringBuilder(20);            for (Map.Entry<ResultMetadataType, Object> entry : metadata.entrySet()) {                if (DISPLAYABLE_METADATA_TYPES.contains(entry.getKey())) {                    metadataText.append(entry.getValue()).append('\n');                }            }            if (metadataText.length() > 0) {                metadataText.setLength(metadataText.length() - 1);                metaTextView.setText(metadataText);                metaTextView.setVisibility(View.VISIBLE);                metaTextViewLabel.setVisibility(View.VISIBLE);            }        }        contentsTextView = (TextView) findViewById(R.id.contents_text_view);// 显示条码内容        Log.e("CONTENT", inputCode);        contentsTextView.setText(inputCode);        int scaledSize = Math.max(22, 32 - inputCode.length() / 4);        contentsTextView.setTextSize(TypedValue.COMPLEX_UNIT_SP, scaledSize);        TextView supplementTextView = (TextView) findViewById(R.id.contents_supplement_text_view);        supplementTextView.setText("");        supplementTextView.setOnClickListener(null);        showQRCodeInformation(inputCode);// 显示条码扫描相关信息    /*    if (PreferenceManager.getDefaultSharedPreferences(this).getBoolean(PreferencesActivity.KEY_SUPPLEMENTAL,                true)) {·            SupplementalInfoRetriever.maybeInvokeRetrieval(supplementTextView, resultHandler.getResult(),                    historyManager, this);        }        int buttonCount = resultHandler.getButtonCount();        ViewGroup buttonView = (ViewGroup) findViewById(R.id.result_button_view);        buttonView.requestFocus();        for (int x = 0; x < ResultHandler.MAX_BUTTON_COUNT; x++) {            TextView button = (TextView) buttonView.getChildAt(x);            if (x < buttonCount) {                button.setVisibility(View.VISIBLE);                button.setText(resultHandler.getButtonText(x));                button.setOnClickListener(new ResultButtonListener(resultHandler, x));            } else {                button.setVisibility(View.GONE);            }        }*/    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent intent) {        if (resultCode == RESULT_OK && requestCode == HISTORY_REQUEST_CODE && historyManager != null) {            int itemNumber = intent.getIntExtra(Intents.History.ITEM_NUMBER, -1);            if (itemNumber >= 0) {                HistoryItem historyItem = historyManager.buildHistoryItem(itemNumber);                decodeOrStoreSavedBitmap(null, historyItem.getResult());            }        }        //相册        if (resultCode == RESULT_OK && (requestCode == RESULT_ALBUM || requestCode == RESULT_CAMERA)) {            String imagePath = null;            switch (requestCode) {                case RESULT_CAMERA: //打开相机后回调                    imagePath = choosePicture.getOutputImage().getPath();                    break;                case RESULT_ALBUM: //打开相册后回调                    if (Build.VERSION.SDK_INT >= 19) {//4.4及以上系统使用这个方法处理图片                        imagePath = choosePicture.handlerImageOnKitKat(intent);                        //choosePicture. handlerImageOnKitKat(data);                    } else {//4.4以下系统使用这个方法处理图片                        choosePicture.handlerImageBeforeKitKat(intent);                    }                    break;                case CROP_PICTURE://图片剪辑后回调                    //显示图片                    break;            }            //清除上次的数据            scanInfo.clear();            myArrayAdapter.notifyDataSetChanged();            customProgressDialog = new CustomProgressDialog(this, "处理中");            customProgressDialog.show();            Log.e("imagePath", imagePath);            isAlbumReturn = true;            this.imagePath = imagePath;        } else {            isAlbumReturn = false;        }    }    private String getRealFilePath(Context c, Uri uri) {        String result;        Cursor cursor = c.getContentResolver().query(uri,                new String[]{MediaStore.Images.ImageColumns.DATA},//                null, null, null);        if (cursor == null) result = uri.getPath();        else {            cursor.moveToFirst();            int index = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA);            result = cursor.getString(index);            cursor.close();        }        return result;    }    private void prasePhoto(final String path) {        //显示时清空内容        @SuppressLint("StaticFieldLeak")        AsyncTask myTask = new AsyncTask<String, Integer, Result>() {            @Override            protected void onPreExecute() {//开始后台处理前                super.onPreExecute();                statusView.setVisibility(View.GONE);                viewfinderView.setVisibility(View.GONE);                resultView.setVisibility(View.VISIBLE);            }            @Override            protected Result doInBackground(String... params) {//后台所做的处理                // 解析二维码/条码                return QRCodeDecoder.syncDecodeQRCode(path);            }            @Override            protected void onPostExecute(Result rawResult) {//处理完成后                super.onPostExecute(rawResult);                if (null == rawResult) {                    Log.e("未识别", "未识别");                    handler.sendEmptyMessageDelayed(R.id.restart_preview, 0L);                    Toast.makeText(CaptureActivity.this, "未识别到二维码或条码，请重试", Toast.LENGTH_LONG).show();                    resetStatusView();                    isAlbumReturn = false;                } else {// 识别出图片二维码/条码，内容为                    scanResultProcess(rawResult);//对扫码结果处理，显示出来                }            }        }.execute(path);        customProgressDialog.dismiss();    }    private void scanResultProcess(Result rawResult){        Bitmap barcode = ZoomImage.getSmallerBitmap(BitmapFactory.decodeFile(imagePath));        imagePath = "";        ResultHandler resultHandler = ResultHandlerFactory.makeResultHandler(CaptureActivity.this, rawResult);        boolean fromLiveScan = barcode != null;        if (fromLiveScan) {            historyManager.addHistoryItem(rawResult, resultHandler);            // Then not from history, so beep/vibrate and we have an image to draw on            beepManager.playBeepSoundAndVibrate();            //drawResultPoints(barcode, scaleFactor, rawResult);            Log.e("drawImageLine", "drawImageLine");        }        maybeSetClipboard(resultHandler);        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(CaptureActivity.this);        if (resultHandler.getDefaultButtonID() != null                && prefs.getBoolean(PreferencesActivity.KEY_AUTO_OPEN_WEB, false)) {            resultHandler.handleButtonPress(resultHandler.getDefaultButtonID());            return;        }        ImageView barcodeImageView = (ImageView) findViewById(R.id.barcode_image_view); // 图片        // LinearLayout result_view=(LinearLayout) findViewById(R.id.result_view);		/* 设置内容 与标题栏间距 */        LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) barcodeImageView.getLayoutParams();        lp.topMargin = CaptureActivity.this.getActionBar().getHeight();        barcodeImageView.setLayoutParams(lp);        /*************/        if (barcode == null) {            barcodeImageView.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.launcher_icon));        } else {            barcodeImageView.setImageBitmap(barcode);        }        TextView formatTextView = (TextView) findViewById(R.id.format_text_view);        formatTextView.setText(rawResult.getBarcodeFormat().toString()); // 二维码格式        TextView typeTextView = (TextView) findViewById(R.id.type_text_view);// 二维码类型        typeTextView.setText(resultHandler.getType().toString());        DateFormat formatter = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT);        TextView timeTextView = (TextView) findViewById(R.id.time_text_view);// 扫描时间        timeTextView.setText(formatter.format(rawResult.getTimestamp()));        TextView metaTextView = (TextView) findViewById(R.id.meta_text_view);        View metaTextViewLabel = findViewById(R.id.meta_text_view_label);// 元数据        metaTextView.setVisibility(View.GONE);        metaTextViewLabel.setVisibility(View.GONE);        Map<ResultMetadataType, Object> metadata = rawResult.getResultMetadata();        if (metadata != null) {            StringBuilder metadataText = new StringBuilder(20);            for (Map.Entry<ResultMetadataType, Object> entry : metadata.entrySet()) {                if (DISPLAYABLE_METADATA_TYPES.contains(entry.getKey())) {                    metadataText.append(entry.getValue()).append('\n');                }            }            if (metadataText.length() > 0) {                metadataText.setLength(metadataText.length() - 1);                metaTextView.setText(metadataText);                metaTextView.setVisibility(View.VISIBLE);                metaTextViewLabel.setVisibility(View.VISIBLE);            }        }        CharSequence displayContents = resultHandler.getDisplayContents();        Log.e("CONTENT", displayContents.toString());        contentsTextView.setText(displayContents);        int scaledSize = Math.max(22, 32 - displayContents.length() / 4);        contentsTextView.setTextSize(TypedValue.COMPLEX_UNIT_SP, scaledSize);        TextView supplementTextView = (TextView) findViewById(R.id.contents_supplement_text_view);        supplementTextView.setText("");        supplementTextView.setOnClickListener(null);        showQRCodeInformation(displayContents.toString());// 显示条码扫描相关信息        if (PreferenceManager.getDefaultSharedPreferences(CaptureActivity.this).getBoolean(PreferencesActivity.KEY_SUPPLEMENTAL,                true)) {            SupplementalInfoRetriever.maybeInvokeRetrieval(supplementTextView, resultHandler.getResult(),                    historyManager, CaptureActivity.this);        }        int buttonCount = resultHandler.getButtonCount();        ViewGroup buttonView = (ViewGroup) findViewById(R.id.result_button_view);        buttonView.requestFocus();        for (int x = 0; x < ResultHandler.MAX_BUTTON_COUNT; x++) {            TextView button = (TextView) buttonView.getChildAt(x);            if (x < buttonCount) {                button.setVisibility(View.VISIBLE);                button.setText(resultHandler.getButtonText(x));                button.setOnClickListener(new ResultButtonListener(resultHandler, x));            } else {                button.setVisibility(View.GONE);            }        }        Log.e("imagePath", imagePath);    }    private void decodeAlbumPhoto(String imagePath) {//解码从相册选取图片的二维码        statusView.setVisibility(View.GONE);        viewfinderView.setVisibility(View.GONE);        resultView.setVisibility(View.VISIBLE);        //显示时清空内容        new Thread(new Runnable() {            @Override            public void run() {                // 开始对图像资源解码                Bitmap barcode = ZoomImage.getSmallerBitmap(BitmapFactory.decodeFile(imagePath));                try {                    Result rawResult = multiFormatReader                            .decodeWithState                                    (new BinaryBitmap                                            (new HybridBinarizer                                                    (new BitmapLuminanceSource(barcode))));                    handlerDispResult.post(new Runnable() {                        @Override                        public void run() {                            ResultHandler resultHandler = ResultHandlerFactory.makeResultHandler(CaptureActivity.this, rawResult);                            boolean fromLiveScan = barcode != null;                            if (fromLiveScan) {                                historyManager.addHistoryItem(rawResult, resultHandler);                                // Then not from history, so beep/vibrate and we have an image to draw on                                beepManager.playBeepSoundAndVibrate();                                //drawResultPoints(barcode, scaleFactor, rawResult);                                Log.e("drawImageLine", "drawImageLine");                            }                            maybeSetClipboard(resultHandler);                            SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(CaptureActivity.this);                            if (resultHandler.getDefaultButtonID() != null                                    && prefs.getBoolean(PreferencesActivity.KEY_AUTO_OPEN_WEB, false)) {                                resultHandler.handleButtonPress(resultHandler.getDefaultButtonID());                                return;                            }                            ImageView barcodeImageView = (ImageView) findViewById(R.id.barcode_image_view); // 图片                            // LinearLayout result_view=(LinearLayout) findViewById(R.id.result_view);		/* 设置内容 与标题栏间距 */                            LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) barcodeImageView.getLayoutParams();                            lp.topMargin = CaptureActivity.this.getActionBar().getHeight();                            barcodeImageView.setLayoutParams(lp);                            /*************/                            if (barcode == null) {                                barcodeImageView.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.launcher_icon));                            } else {                                barcodeImageView.setImageBitmap(barcode);                            }                            TextView formatTextView = (TextView) findViewById(R.id.format_text_view);                            formatTextView.setText(rawResult.getBarcodeFormat().toString()); // 二维码格式                            TextView typeTextView = (TextView) findViewById(R.id.type_text_view);// 二维码类型                            typeTextView.setText(resultHandler.getType().toString());                            DateFormat formatter = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT);                            TextView timeTextView = (TextView) findViewById(R.id.time_text_view);// 扫描时间                            timeTextView.setText(formatter.format(rawResult.getTimestamp()));                            TextView metaTextView = (TextView) findViewById(R.id.meta_text_view);                            View metaTextViewLabel = findViewById(R.id.meta_text_view_label);// 元数据                            metaTextView.setVisibility(View.GONE);                            metaTextViewLabel.setVisibility(View.GONE);                            Map<ResultMetadataType, Object> metadata = rawResult.getResultMetadata();                            if (metadata != null) {                                StringBuilder metadataText = new StringBuilder(20);                                for (Map.Entry<ResultMetadataType, Object> entry : metadata.entrySet()) {                                    if (DISPLAYABLE_METADATA_TYPES.contains(entry.getKey())) {                                        metadataText.append(entry.getValue()).append('\n');                                    }                                }                                if (metadataText.length() > 0) {                                    metadataText.setLength(metadataText.length() - 1);                                    metaTextView.setText(metadataText);                                    metaTextView.setVisibility(View.VISIBLE);                                    metaTextViewLabel.setVisibility(View.VISIBLE);                                }                            }                            CharSequence displayContents = resultHandler.getDisplayContents();                            contentsTextView = (TextView) findViewById(R.id.contents_text_view);// 显示条码内容                            Log.e("CONTENT", displayContents.toString());                            contentsTextView.setText(displayContents);                            int scaledSize = Math.max(22, 32 - displayContents.length() / 4);                            contentsTextView.setTextSize(TypedValue.COMPLEX_UNIT_SP, scaledSize);                            TextView supplementTextView = (TextView) findViewById(R.id.contents_supplement_text_view);                            supplementTextView.setText("");                            supplementTextView.setOnClickListener(null);                            showQRCodeInformation(displayContents.toString());// 显示条码扫描相关信息                            if (PreferenceManager.getDefaultSharedPreferences(CaptureActivity.this).getBoolean(PreferencesActivity.KEY_SUPPLEMENTAL,                                    true)) {                                SupplementalInfoRetriever.maybeInvokeRetrieval(supplementTextView, resultHandler.getResult(),                                        historyManager, CaptureActivity.this);                            }                            int buttonCount = resultHandler.getButtonCount();                            ViewGroup buttonView = (ViewGroup) findViewById(R.id.result_button_view);                            buttonView.requestFocus();                            for (int x = 0; x < ResultHandler.MAX_BUTTON_COUNT; x++) {                                TextView button = (TextView) buttonView.getChildAt(x);                                if (x < buttonCount) {                                    button.setVisibility(View.VISIBLE);                                    button.setText(resultHandler.getButtonText(x));                                    button.setOnClickListener(new ResultButtonListener(resultHandler, x));                                } else {                                    button.setVisibility(View.GONE);                                }                            }                            Log.e("imagePath", imagePath);                        }                    });                } catch (NotFoundException e) {                    Log.e("未识别", "未识别");                    handler.sendEmptyMessageDelayed(R.id.restart_preview, 0L);                    handlerDispResult.post(new Runnable() {                        @Override                        public void run() {                            Toast.makeText(CaptureActivity.this, "未识别到二维码，请重试", Toast.LENGTH_LONG).show();                            resetStatusView();                        }                    });                    isAlbumReturn = false;                    e.printStackTrace();                } finally {                    customProgressDialog.dismiss();                }            }        }).start();    }    private void decodeOrStoreSavedBitmap(Bitmap bitmap, Result result) {        // Bitmap isn't used yet -- will be used soon        if (handler == null) {            savedResultToShow = result;        } else {            if (result != null) {                savedResultToShow = result;            }            if (savedResultToShow != null) {                Message message = Message.obtain(handler, R.id.decode_succeeded, savedResultToShow);                handler.sendMessage(message);            }            savedResultToShow = null;        }    }    @Override    public void surfaceCreated(SurfaceHolder holder) {        if (holder == null) {            Log.e(TAG, "*** WARNING *** surfaceCreated() gave us a null surface!");        }        if (!hasSurface) {            hasSurface = true;            initCamera(holder);        }    }    @Override    public void surfaceDestroyed(SurfaceHolder holder) {        hasSurface = false;    }    @Override    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {        // do nothing    }    /**     * A valid barcode has been found, so give an indication of success and show the     * results.     *     * @param rawResult   The contents of the barcode.     * @param scaleFactor amount by which thumbnail was scaled     * @param barcode     A greyscale bitmap of the camera data which was decoded.     */    public void handleDecode(Result rawResult, Bitmap barcode, float scaleFactor) {        inactivityTimer.onActivity();        lastResult = rawResult;        Log.e("ScanResult", lastResult.getText());        ResultHandler resultHandler = ResultHandlerFactory.makeResultHandler(this, rawResult);        boolean fromLiveScan = barcode != null;        if (fromLiveScan) {            historyManager.addHistoryItem(rawResult, resultHandler);            // Then not from history, so beep/vibrate and we have an image to draw on            beepManager.playBeepSoundAndVibrate();            drawResultPoints(barcode, scaleFactor, rawResult);            Log.e("drawImageLine", "drawImageLine");        }        switch (source) {            case NATIVE_APP_INTENT:            case PRODUCT_SEARCH_LINK:                handleDecodeExternally(rawResult, resultHandler, barcode);                break;            case ZXING_LINK:                if (scanFromWebPageManager == null || !scanFromWebPageManager.isScanFromWebPage()) {                    handleDecodeInternally(rawResult, resultHandler, barcode);                } else {                    handleDecodeExternally(rawResult, resultHandler, barcode);                }                break;            case NONE:                SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);                if (fromLiveScan && prefs.getBoolean(PreferencesActivity.KEY_BULK_MODE, false)) {                    Toast.makeText(getApplicationContext(),                            getResources().getString(R.string.msg_bulk_mode_scanned) + " (" + rawResult.getText() + ')',                            Toast.LENGTH_SHORT).show();                    maybeSetClipboard(resultHandler);                    // Wait a moment or else it will scan the same barcode continuously about 3                    // times                    restartPreviewAfterDelay(BULK_MODE_SCAN_DELAY_MS);                } else {                    handleDecodeInternally(rawResult, resultHandler, barcode);                }                break;        }    }    /**     * Superimpose a line for 1D or dots for 2D to highlight the key features of the     * barcode.     *     * @param barcode     A bitmap of the captured image.     * @param scaleFactor amount by which thumbnail was scaled     * @param rawResult   The decoded results which contains the points to draw.     */    private void drawResultPoints(Bitmap barcode, float scaleFactor, Result rawResult) {        ResultPoint[] points = rawResult.getResultPoints();        if (points != null && points.length > 0) {            Canvas canvas = new Canvas(barcode);            Paint paint = new Paint();            paint.setColor(getResources().getColor(R.color.result_points));// 扫描结果界面 图片上的线颜色            if (points.length == 2) {                paint.setStrokeWidth(4.0f);                drawLine(canvas, paint, points[0], points[1], scaleFactor);            } else if (points.length == 4 && (rawResult.getBarcodeFormat() == BarcodeFormat.UPC_A                    || rawResult.getBarcodeFormat() == BarcodeFormat.EAN_13)) {                // Hacky special case -- draw two lines, for the barcode and metadata                drawLine(canvas, paint, points[0], points[1], scaleFactor);                drawLine(canvas, paint, points[2], points[3], scaleFactor);            } else {                paint.setStrokeWidth(10.0f);                for (ResultPoint point : points) {                    if (point != null) {                        canvas.drawPoint(scaleFactor * point.getX(), scaleFactor * point.getY(), paint);                    }                }            }        }    }    private static void drawLine(Canvas canvas, Paint paint, ResultPoint a, ResultPoint b, float scaleFactor) {        if (a != null && b != null) {            canvas.drawLine(scaleFactor * a.getX(), scaleFactor * a.getY(), scaleFactor * b.getX(),                    scaleFactor * b.getY(), paint);        }    }    // Put up our own UI for how to handle the decoded contents.    private void handleDecodeInternally(Result rawResult, ResultHandler resultHandler, Bitmap barcode) {        maybeSetClipboard(resultHandler);        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);        if (resultHandler.getDefaultButtonID() != null                && prefs.getBoolean(PreferencesActivity.KEY_AUTO_OPEN_WEB, false)) {            resultHandler.handleButtonPress(resultHandler.getDefaultButtonID());            return;        }        statusView.setVisibility(View.GONE);        viewfinderView.setVisibility(View.GONE);        //显示时清空内容        loading.setText("正在查询.....请稍后");        resultView.setVisibility(View.VISIBLE);        ImageView barcodeImageView = (ImageView) findViewById(R.id.barcode_image_view); // 图片        // LinearLayout result_view=(LinearLayout) findViewById(R.id.result_view);		/* 设置内容 与标题栏间距 */        LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) barcodeImageView.getLayoutParams();        lp.topMargin = this.getActionBar().getHeight();        barcodeImageView.setLayoutParams(lp);        /*************/        if (barcode == null) {            barcodeImageView.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.launcher_icon));        } else {            barcodeImageView.setImageBitmap(barcode);        }        TextView formatTextView = (TextView) findViewById(R.id.format_text_view);        formatTextView.setText(rawResult.getBarcodeFormat().toString()); // 二维码格式        TextView typeTextView = (TextView) findViewById(R.id.type_text_view);// 二维码类型        typeTextView.setText(resultHandler.getType().toString());        DateFormat formatter = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT);        TextView timeTextView = (TextView) findViewById(R.id.time_text_view);// 扫描时间        timeTextView.setText(formatter.format(rawResult.getTimestamp()));        TextView metaTextView = (TextView) findViewById(R.id.meta_text_view);        View metaTextViewLabel = findViewById(R.id.meta_text_view_label);// 元数据        metaTextView.setVisibility(View.GONE);        metaTextViewLabel.setVisibility(View.GONE);        Map<ResultMetadataType, Object> metadata = rawResult.getResultMetadata();        if (metadata != null) {            StringBuilder metadataText = new StringBuilder(20);            for (Map.Entry<ResultMetadataType, Object> entry : metadata.entrySet()) {                if (DISPLAYABLE_METADATA_TYPES.contains(entry.getKey())) {                    metadataText.append(entry.getValue()).append('\n');                }            }            if (metadataText.length() > 0) {                metadataText.setLength(metadataText.length() - 1);                metaTextView.setText(metadataText);                metaTextView.setVisibility(View.VISIBLE);                metaTextViewLabel.setVisibility(View.VISIBLE);            }        }        CharSequence displayContents = resultHandler.getDisplayContents();        contentsTextView = (TextView) findViewById(R.id.contents_text_view);// 显示条码内容        Log.e("CONTENT", displayContents.toString());        contentsTextView.setText(displayContents);        int scaledSize = Math.max(22, 32 - displayContents.length() / 4);        contentsTextView.setTextSize(TypedValue.COMPLEX_UNIT_SP, scaledSize);        TextView supplementTextView = (TextView) findViewById(R.id.contents_supplement_text_view);        supplementTextView.setText("");        supplementTextView.setOnClickListener(null);        showQRCodeInformation(displayContents.toString());// 显示条码扫描相关信息        if (PreferenceManager.getDefaultSharedPreferences(this).getBoolean(PreferencesActivity.KEY_SUPPLEMENTAL,                true)) {            SupplementalInfoRetriever.maybeInvokeRetrieval(supplementTextView, resultHandler.getResult(),                    historyManager, this);        }        int buttonCount = resultHandler.getButtonCount();        ViewGroup buttonView = (ViewGroup) findViewById(R.id.result_button_view);        buttonView.requestFocus();        for (int x = 0; x < ResultHandler.MAX_BUTTON_COUNT; x++) {            TextView button = (TextView) buttonView.getChildAt(x);            if (x < buttonCount) {                button.setVisibility(View.VISIBLE);                button.setText(resultHandler.getButtonText(x));                button.setOnClickListener(new ResultButtonListener(resultHandler, x));            } else {                button.setVisibility(View.GONE);            }        }    }    private void initShowResultView() {        contentsTextView = (TextView) findViewById(R.id.contents_text_view);// 显示条码内容        loading = findViewById(R.id.loading);        ListView scanInfoListView = findViewById(R.id.scan_info);        myArrayAdapter = new ArrayAdapter<String>(this, R.layout.scaninfo_listviewlayout, scanInfo);        scanInfoListView.setAdapter(myArrayAdapter);    }    private void showQRCodeInformation(final String code) {   /*     new Thread(new Runnable() {            @Override            public void run() {                try {                   // SharedPreferences shared = CaptureActivity.this.getSharedPreferences(LoginActivity.Login_Info_SHARED, Context.MODE_PRIVATE);                    Connection con = ConnectServer.connectServer(CaptureActivity.this);                    CallableStatement statement = con.prepareCall("{call dbo.QRCodeScan(?)}");//存储过程                    statement.setString("code", code);//设置存储过程参数                    statement.executeQuery();                    ResultSet result = statement.getResultSet();                    while (result != null && result.next()) {                        scanInfo.add(result.getString("info"));                    }                    handlerDispResult.post(new Runnable() {                        @Override                        public void run() {                            loading.setVisibility(View.GONE);                            myArrayAdapter.notifyDataSetChanged();                        }                    });                } catch (ClassNotFoundException | SQLException | NullPointerException e) {                    loading.setText("查询失败：" + e.getMessage());                    loading.setTextColor(Color.RED);                    loading.setVisibility(View.VISIBLE);                }            }        }).start();*/        Call<GetLineBean> request = ManageRetrofit.getRetroInter(this).queryScanRecord(code);        request.enqueue(new Callback<GetLineBean>() {            @Override            public void onResponse(Call<GetLineBean> call, Response<GetLineBean> response) {                if (response.body()!=null){                String msg = response.body().getMsg();                if ("success".equals(msg)) {//密码正确                    List<GetLineBean.DataBean> data = response.body().getData();                    for (int i = 0; i < data.size(); i++) {                        scanInfo.add(data.get(i).getInfo());                    }                    handlerDispResult.post(new Runnable() {                        @Override                        public void run() {                            loading.setVisibility(View.GONE);                            myArrayAdapter.notifyDataSetChanged();                        }                    });                } else {                    loading.setText("查询失败：" + msg);                    loading.setTextColor(Color.RED);                    loading.setVisibility(View.VISIBLE);                }                }else{                    loading.setText("网络错误");                    loading.setTextColor(Color.RED);                    loading.setVisibility(View.VISIBLE);                }            }            @Override            public void onFailure(Call<GetLineBean> call, Throwable t) {                loading.setText("查询失败1：" + t.getMessage());                loading.setTextColor(Color.RED);                loading.setVisibility(View.VISIBLE);            }        });    }    //直接使用SQL查询    private void queryQRCode(String code) {      //  SharedPreferences shared = this.getSharedPreferences("query", Context.MODE_PRIVATE);        String sql = "", sqlQue = "";        String sql2DCode = "";        ResultSet result;        try {            Connection con = ConnectServer.connectServer(this);            Log.e("Code Length", String.valueOf(code.length()));            ResultSet result2DCode;            ResultSet resultQue;            if (code.length() == 100) {// 二维码                sql2DCode = "SELECT [2DCode],printcode FROM cptiaoma WHERE  [2DCode] = '" + code + "'";                result2DCode = con.createStatement().executeQuery(sql2DCode);                if (result2DCode.next()) {                    String tiaomaCode = result2DCode.getString("printcode");                    Log.e("一维码", tiaomaCode);                    sql = "SELECT sern,pplace,createdate FROM  z_comwcb WHERE sern='"                            + tiaomaCode + "'";                    sqlQue = "SELECT que_id,que_name FROM  z_quexian WHERE que_id IN "                            + "(SELECT que_id FROM z_jianyan WHERE sern ='" + tiaomaCode + "')";                    Log.e("sql", sql);                    result = con.createStatement().executeQuery(sql);                    Log.e("sqlQue", sqlQue);                    resultQue = con.createStatement().executeQuery(sqlQue);                    Log.e("sql2DCODE", sql2DCode);                }            } else if (code.length() == 20) {// 一维码                sql2DCode = "SELECT [2DCode],printcode FROM cptiaoma WHERE printcode = '" + code + "'";                Log.e("sql2DCode", sql2DCode);                result2DCode = con.createStatement().executeQuery(sql2DCode);                if (result2DCode.next()) {                    Log.e("QRCode", result2DCode.getString("2DCode"));                    String QRCode = result2DCode.getString("2DCode");                }                sql = "SELECT sern,pplace,createdate FROM  z_comwcb" + " WHERE sern='" + code + "'";                sqlQue = "SELECT que_id,que_name FROM  z_quexian WHERE que_id IN "                        + "(SELECT que_id FROM z_jianyan WHERE sern='" + code + "')";                Log.e("sql", sql);                result = con.createStatement().executeQuery(sql);                Log.e("sqlQue", sqlQue);                resultQue = con.createStatement().executeQuery(sqlQue);                Log.e("sql2DCODE", sql2DCode);            }        } catch (ClassNotFoundException e1) {            Log.e("ClassNotFound ERROR ", e1.getMessage());            e1.printStackTrace();        } catch (SQLException e1) {            Log.e("QUERY ERROR ", e1.getMessage());            e1.printStackTrace();        }    }    // Briefly show the contents of the barcode, then handle the result outside    // Barcode Scanner.    private void handleDecodeExternally(Result rawResult, ResultHandler resultHandler, Bitmap barcode) {        if (barcode != null) {            viewfinderView.drawResultBitmap(barcode);        }        long resultDurationMS;        if (getIntent() == null) {            resultDurationMS = DEFAULT_INTENT_RESULT_DURATION_MS;        } else {            resultDurationMS = getIntent().getLongExtra(Intents.Scan.RESULT_DISPLAY_DURATION_MS,                    DEFAULT_INTENT_RESULT_DURATION_MS);        }        if (resultDurationMS > 0) {            String rawResultString = String.valueOf(rawResult);            if (rawResultString.length() > 32) {                rawResultString = rawResultString.substring(0, 32) + " ...";            }            statusView.setText(getString(resultHandler.getDisplayTitle()) + " : " + rawResultString);        }        maybeSetClipboard(resultHandler);        switch (source) {            case NATIVE_APP_INTENT:                // Hand back whatever action they requested - this can be changed to                // Intents.Scan.ACTION when                // the deprecated intent is retired.                Intent intent = new Intent(getIntent().getAction());                intent.addFlags(Intents.FLAG_NEW_DOC);                intent.putExtra(Intents.Scan.RESULT, rawResult.toString());                intent.putExtra(Intents.Scan.RESULT_FORMAT, rawResult.getBarcodeFormat().toString());                byte[] rawBytes = rawResult.getRawBytes();                if (rawBytes != null && rawBytes.length > 0) {                    intent.putExtra(Intents.Scan.RESULT_BYTES, rawBytes);                }                Map<ResultMetadataType, ?> metadata = rawResult.getResultMetadata();                if (metadata != null) {                    if (metadata.containsKey(ResultMetadataType.UPC_EAN_EXTENSION)) {                        intent.putExtra(Intents.Scan.RESULT_UPC_EAN_EXTENSION,                                metadata.get(ResultMetadataType.UPC_EAN_EXTENSION).toString());                    }                    Number orientation = (Number) metadata.get(ResultMetadataType.ORIENTATION);                    if (orientation != null) {                        intent.putExtra(Intents.Scan.RESULT_ORIENTATION, orientation.intValue());                    }                    String ecLevel = (String) metadata.get(ResultMetadataType.ERROR_CORRECTION_LEVEL);                    if (ecLevel != null) {                        intent.putExtra(Intents.Scan.RESULT_ERROR_CORRECTION_LEVEL, ecLevel);                    }                    @SuppressWarnings("unchecked")                    Iterable<byte[]> byteSegments = (Iterable<byte[]>) metadata.get(ResultMetadataType.BYTE_SEGMENTS);                    if (byteSegments != null) {                        int i = 0;                        for (byte[] byteSegment : byteSegments) {                            intent.putExtra(Intents.Scan.RESULT_BYTE_SEGMENTS_PREFIX + i, byteSegment);                            i++;                        }                    }                }                sendReplyMessage(R.id.return_scan_result, intent, resultDurationMS);                break;            case PRODUCT_SEARCH_LINK:                // Reformulate the URL which triggered us into a query, so that the request goes                // to the same                // TLD as the scan URL.                int end = sourceUrl.lastIndexOf("/scan");                String productReplyURL = sourceUrl.substring(0, end) + "?q=" + resultHandler.getDisplayContents()                        + "&source=zxing";                sendReplyMessage(R.id.launch_product_query, productReplyURL, resultDurationMS);                break;            case ZXING_LINK:                if (scanFromWebPageManager != null && scanFromWebPageManager.isScanFromWebPage()) {                    String linkReplyURL = scanFromWebPageManager.buildReplyURL(rawResult, resultHandler);                    scanFromWebPageManager = null;                    sendReplyMessage(R.id.launch_product_query, linkReplyURL, resultDurationMS);                }                break;        }    }    private void maybeSetClipboard(ResultHandler resultHandler) {        if (copyToClipboard && !resultHandler.areContentsSecure()) {            ClipboardInterface.setText(resultHandler.getDisplayContents(), this);        }    }    private void sendReplyMessage(int id, Object arg, long delayMS) {        if (handler != null) {            Message message = Message.obtain(handler, id, arg);            if (delayMS > 0L) {                handler.sendMessageDelayed(message, delayMS);            } else {                handler.sendMessage(message);            }        }    }    private void initCamera(SurfaceHolder surfaceHolder) {        if (surfaceHolder == null) {            throw new IllegalStateException("No SurfaceHolder provided");        }        if (cameraManager.isOpen()) {            Log.w(TAG, "initCamera() while already open -- late SurfaceView callback?");            return;        }        try {            cameraManager.openDriver(surfaceHolder);            // Creating the handler starts the preview, which can also throw a            // RuntimeException.            if (handler == null) {                handler = new CaptureActivityHandler(this, decodeFormats, decodeHints, characterSet, cameraManager);            }            decodeOrStoreSavedBitmap(null, null);        } catch (IOException ioe) {            Log.w(TAG, ioe);            displayFrameworkBugMessageAndExit();        } catch (RuntimeException e) {            // Barcode Scanner has seen crashes in the wild of this variety:            // java.?lang.?RuntimeException: Fail to connect to camera service            Log.w(TAG, "Unexpected error initializing camera", e);            displayFrameworkBugMessageAndExit();        }    }    private void displayFrameworkBugMessageAndExit() {        AlertDialog.Builder builder = new AlertDialog.Builder(this);        builder.setTitle(getString(R.string.app_name));        builder.setMessage(getString(R.string.msg_camera_framework_bug));        builder.setPositiveButton(R.string.button_ok, new FinishListener(this));        builder.setOnCancelListener(new FinishListener(this));        builder.show();    }    public void restartPreviewAfterDelay(long delayMS) {        if (handler != null) {            handler.sendEmptyMessageDelayed(R.id.restart_preview, delayMS);        }        resetStatusView();    }    private void resetStatusView() {        resultView.setVisibility(View.GONE);        statusView.setText(R.string.msg_default_status);        statusView.setVisibility(View.VISIBLE);        viewfinderView.setVisibility(View.VISIBLE);        lastResult = null;        //清空结果        scanInfo.clear();        myArrayAdapter.notifyDataSetChanged();        loading.setText("查询中...请稍后：");        loading.setTextColor(getResources().getColor(R.color.result_text));        loading.setVisibility(View.VISIBLE);//显示正在加载中    }    public void drawViewfinder() {        viewfinderView.drawViewfinder();    }    //相册权限申请结果回调    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        if (requestCode == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {            choosePicture.openAlbum();        } else {            Toast.makeText(this, "你没有开启权限", Toast.LENGTH_SHORT).show();        }    }}